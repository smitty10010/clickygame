{"version":3,"sources":["components/Navbar/Navbar.js","components/Wrapper/Wrapper.js","components/Card/Card.js","components/Score/Score.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","title","Wrapper","children","Card","value","id","onClick","handleClick","alt","name","src","image","Score","Title","App","state","philosophers","score","streak","clicked","shuffleCards","i","length","j","Math","floor","random","_ref","_this","setState","concat","indexOf","_this2","this","components_Wrapper_Wrapper","components_Navbar_Navbar","components_Score_Score","components_Title_Title","map","philosopher","components_Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"suCAOeA,EANA,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACfH,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,SCCAC,EAFC,SAAAN,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMO,WCY1CC,EAZF,SAAAR,GAAK,OACfC,EAAAC,EAAAC,cAAA,OACAC,UAAU,yBACVK,MAAOT,EAAMU,GACbC,QAAS,kBAAMX,EAAMY,YAAYZ,EAAMU,MAEvCT,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYS,IAAKb,EAAMc,KAAMC,IAAKf,EAAMgB,WCL5CC,EAFD,SAAAjB,GAAK,OAAKC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAiBH,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,YCErDW,EAFD,SAAAlB,GAAK,OAAKC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCAAyCJ,EAAMO,kBC+DtEY,6MArDfC,MAAQ,CACNC,eACAC,MAAO,EACPC,OAAQ,EACRC,QAAS,MAGXC,aAAe,SAAAvB,GACb,IAAK,IAAIwB,EAAIxB,EAAEyB,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACrC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADLM,EAEtB,CAAC9B,EAAE0B,GAAI1B,EAAEwB,IAAvBxB,EAAEwB,GAFkCM,EAAA,GAE9B9B,EAAE0B,GAF4BI,EAAA,GAIvC,OAAO9B,KAITU,YAAc,SAAAF,GACZ,IAAIe,EAAeQ,EAAKR,aAAaJ,GACrCY,EAAKC,SAAS,CAACb,aAAcI,EAAcD,QAASS,EAAKb,MAAMI,QAAQW,OAAOzB,MACtC,IAApCuB,EAAKb,MAAMI,QAAQY,QAAQ1B,GAC7BuB,EAAKC,SAAS,CAACZ,MAAOW,EAAKb,MAAME,MAAO,EAAGC,OAAQU,EAAKb,MAAMG,OAAQ,IAEtEU,EAAKC,SAAS,CAACX,OAAQ,EAAGD,MAAO,EAAGE,QAAQ,8EAMrC,IAAAa,EAAAC,KACP,OACErC,EAAAC,EAAAC,cAACoC,EAAD,KACAtC,EAAAC,EAAAC,cAACqC,EAAD,CACAnC,MAAM,wBAINJ,EAAAC,EAAAC,cAACsC,EAAD,eAAeH,KAAKlB,MAAME,MAA1B,YAA0CgB,KAAKlB,MAAMG,QACrDtB,EAAAC,EAAAC,cAACuC,EAAD,KAAOzC,EAAAC,EAAAC,cAAA,iCACPF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdkC,KAAKlB,MAAMC,aAAasB,IAAI,SAAAC,GAAW,OAAK3C,EAAAC,EAAAC,cAAC0C,EAAD,CAC3CjC,YAAayB,EAAKzB,YAClBF,GAAIkC,EAAYlC,GAChBoC,IAAKF,EAAYlC,GACjBI,KAAM8B,EAAY9B,KAClBE,MAAO4B,EAAY5B,mBA7CT+B,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b1316ec2.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Navbar = props => (\r\n    <nav className=\"navbar-brand\">\r\n    <h3>{props.title}</h3>\r\n    </nav>\r\n);\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\n\r\nconst Card = props => (\r\n   <div \r\n   className=\"card w-25 m-1 col-sm-3\"\r\n   value={props.id}\r\n   onClick={() => props.handleClick(props.id)}\r\n   >\r\n   <div>\r\n    <img className=\"img-fluid\" alt={props.name} src={props.image} />\r\n   </div>\r\n   </div> \r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nconst Score = props => (<span className=\"float-sm-right\"><h3>{props.children}</h3></span>);\r\n\r\nexport default Score; ","import React from \"react\";\r\n\r\nconst Title = props => (<h1 className=\"jumbotron jumbotron-fluid text-center\">{props.children}</h1>);\r\n\r\nexport default Title;","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar\";\nimport Wrapper from \"./components/Wrapper\";\nimport Card from \"./components/Card\";\nimport Score from \"./components/Score\";\nimport Title from \"./components/Title\";\nimport philosophers from \"./image.json\";\n\n\n\n\nclass App extends Component {\nstate = {\n  philosophers,\n  score: 0,\n  streak: 0,\n  clicked: []\n};\n\nshuffleCards = a => {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n};\n\n\nhandleClick = id => {\n  let shuffleCards = this.shuffleCards(philosophers);\n  this.setState({philosophers: shuffleCards, clicked: this.state.clicked.concat(id) });\n  if (this.state.clicked.indexOf(id) === -1){\n    this.setState({score: this.state.score +1, streak: this.state.streak +1 });\n  } else {\n    this.setState({streak: 0, score: 0, clicked:[]});\n  }\n};\n\n\n\n  render() {\n    return (\n      <Wrapper>\n      <Navbar \n      title=\"Click A Philosopher\"\n      >\n      \n      </Navbar>\n      <Score>Score: {this.state.score} Streak: {this.state.streak}</Score>\n      <Title><h1>Pick A Philosopher</h1></Title>\n      <div className=\"row\">\n      {this.state.philosophers.map(philosopher => (<Card \n        handleClick={this.handleClick}\n        id={philosopher.id}\n        key={philosopher.id}\n        name={philosopher.name}\n        image={philosopher.image}\n      />))}      \n      </div>\n\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}